'''
from math import dist


n = int(input('No. of Vertices'))
m = int(input('No. of Edges'))
# n = int(input('No of vertices:'))
# m = int(input())
adjl = [ [] for k in range(n+1)]
adjm = [[0 for _ in range(n+1)] for _ in range(n+1)]
# parent = [_ for _ in range(n+1)]
# size = [1 for _ in range(n+1)]
inf = 10**12
dist = [inf for _ in range(n+1)]
vis = [0 for _ in range(n+1)]

for _ in range(m):
    u,v,w = [int(x) for x in input().split()]
    adjm[u][v] = w
    adjm[v][u] = w
    adjl[u].append((v,w))
    adjl[v].append((u,w))
source = int(input())
s = set()
dist[source]=0
s.add((0,source))
while(len(s)):
    x = min(s)
    s.remove(x)
    for e in adjl[]


'''

# KMP Algorithm

# Finding prefix function pi

def prefix_function(s):
    n = len(s)
    pi = [0] * n
    for i in range(1, n):
        j = pi[i - 1]
        while j > 0 and s[i] != s[j]:
            j = pi[j - 1]
        if s[i] == s[j]:
            j += 1
        pi[i] = j
    return pi

print(prefix_function('ababbabbabbababbabb'))
